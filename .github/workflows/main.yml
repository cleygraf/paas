name: PaaS main CI/CD

on: [push]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

  # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'pages'
  cancel-in-progress: false

env:
  APP_NAME: 'paas-demo'
  PAAS_TITLE: 'GitLab PaaS Demo'
  WHY_TITLE: 'Why GitLab?'
  AI_TITLE: 'GitLab Duo AI Introduction and Demo'
  OPERATORS_TITLE: 'GitLab k8s Operators'
  COMPLIANCE_TITLE: 'Achieving Continuous Compliance with GitLab'
  SUBTITLE: 'LEYUX, 2023-11-11'
  # URLs
  URL_PROJ: 'https://github.com/cleygraf/paas'
  URL_PROD: 'http://gitlab-prod-lb-218443987.eu-central-1.elb.amazonaws.com'
  URL_REVIEW: 'http://gitlab-review-lb-1662808248.eu-central-1.elb.amazonaws.com'
  URL_AI_PROD: 'http://gitlab-review-lb-1662808248.eu-central-1.elb.amazonaws.com/ai.html'
  URL_PAAS_PROD: 'http://gitlab-review-lb-1662808248.eu-central-1.elb.amazonaws.com/paas.html'
  URL_WHY_PROD: 'http://gitlab-review-lb-1662808248.eu-central-1.elb.amazonaws.com/why.html'
  URL_OPERATOR_PROD: 'http://gitlab-review-lb-1662808248.eu-central-1.elb.amazonaws.com/operator.html'

jobs:
  markdownlint:
    runs-on: ubuntu-latest
    container: registry.gitlab.com/pipeline-components/markdownlint:latest

    steps:
      - name: Run markdownlint
        run: mdl --style all -i -r ~MD004,~MD009,~MD013,~MD025,~MD032,~MD041,~MD033,~MD002,~MD026,~MD035,~MD024,~MD034,~MD007,~MD031,~MD029,~MD036 --warnings .

  create-qr:
    runs-on: ubuntu-latest
    container: leplusorg/qrcode
    steps:
      - run: if [ ! -d ./build/assets ]; then mkdir -p ./build/assets; fi
      - run: qrencode -s 6 -l H -o "./build/assets/url-proj.png" "$URL_PROJ"
      - run: qrencode -s 6 -l H -o "./build/assets/url-prod.png" "$URL_PROD"
      - run: qrencode -t ANSI -o "./build/assets/url-prod.txt" "$URL_PROD"
      - run: qrencode -s 6 -l H -o "./build/assets/url-ai-prod.png" "$URL_AI_PROD"
      - run: qrencode -s 6 -l H -o "./build/assets/url-why-prod.png" "$URL_WHY_PROD"
      - run: qrencode -s 6 -l H -o "./build/assets/url-operator-prod.png" "$URL_OPERATOR_PROD"
      - run: qrencode -t ANSI -o "./build/assets/url-ai-prod.txt" "$URL_AI_PROD"
      - run: qrencode -s 6 -l H -o "./build/assets/url-review.png" "$URL_REVIEW"
      - run: qrencode -t ANSI -o "./build/assets/url-review.txt" "$URL_REVIEW"
      - run: qrencode -s 6 -l H -o "./build/assets/project-path.png" "$URL_PROJ"
      - run: qrencode -t ANSI -o "./build/assets/project-path.txt" "$URL_PROJ"

      - name: Upload qrcodes
        uses: actions/upload-artifact@v3
        with:
          name: qrcodes
          path: ./build

  generate-deck:
    runs-on: ubuntu-latest
    container:
      image: marpteam/marp-cli
      options: --user root
    needs: create-qr

    steps:
      - name: Check out repository code üõéÔ∏è
        uses: actions/checkout@v4

      - name: Download qrcodes üõéÔ∏è
        uses: actions/download-artifact@v3
        with:
          name: qrcodes
          path: ./artifacts/build

      - run: cp -vr ./artifacts/build ./
      - run: cp -r ./build/assets/* ./src/assets/

      - run: sed -i "s|##PAAS_TITLE##|${PAAS_TITLE}|g" src/*.md
      - run: sed -i "s|##WHY_TITLE##|${WHY_TITLE}|g" src/*.md
      - run: sed -i "s|##AI_TITLE##|${AI_TITLE}|g" src/*.md
      - run: sed -i "s|##OPERATORS_TITLE##|${OPERATORS_TITLE}|g" src/*.md
      - run: sed -i "s|##COMPLIANCE_TITLE##|${COMPLIANCE_TITLE}|g" src/*.md
      - run: sed -i "s|##SUBTITLE##|${SUBTITLE}|g" src/*.md
      - run: sed -i "s,##URL_PROD##,$URL_PROD,g" src/*.md
      - run: sed -i "s,##CI_PROJECT_PATH##,$URL_PROJ,g" src/*.md
      - run: sed -i "s,##URL_PROJ##,$URL_PROJ,g" src/*.md
      - run: sed -i "s,##URL_AI_PROD##,$URL_AI_PROD,g" src/*.md
      - run: sed -i "s,##URL_WHY_PROD##,$URL_WHY_PROD,g" src/*.md
      - run: sed -i "s,##URL_OPERATOR_PROD##,$URL_OPERATOR_PROD,g" src/*.md
      - run: sed -i "s,##URL_REVIEW##,$URL_REVIEW,g" src/*.md

      - name: Marp build html files üîß
        uses: docker://marpteam/marp-cli:latest
        with:
          args: -I src --html -o build
        env:
          MARP_USER: root:root

      - run: cp ./src/assets/favicon.ico ./build/
      - run: cp ./src/gitlab-theme.css ./build/
      - run: cp -r ./src/assets ./build/

      - run: ls -al ./
      - run: ls -al ./build
      - run: ls -al ./build/assets

      - name: Upload slides ‚úàÔ∏è
        uses: actions/upload-artifact@v3
        with:
          name: slides
          path: ./build

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    concurrency: ci-${{ github.ref }}
    needs: generate-deck
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Download slides ‚úàÔ∏è
        uses: actions/download-artifact@v3
        with:
          name: slides
          path: ./build

      - name: Deploy üöÄ
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ./build

  # deploy:
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   runs-on: ubuntu-latest
  #   needs: generate-deck
  #   steps:
  #     - name: Checkout üõéÔ∏è
  #       uses: actions/checkout@v4

  #     - name: Download slides ‚úàÔ∏è
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: slides
  #         path: ./build

  #     - name: Setup Pages üîß
  #       uses: actions/configure-pages@v3

  #     - name: Upload artifact ‚úàÔ∏è
  #       uses: actions/upload-pages-artifact@v2
  #       with:
  #         # Upload entire repository
  #         path: './build'

  #     - name: Deploy to GitHub Pages  üöÄ
  #       id: deployment
  #       uses: actions/deploy-pages@v2
