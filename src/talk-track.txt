Why GitLab and Google Cloud?
-> We share a bunch of commonalities: Both names start with a capital G and other letters of the _Alphabet_, like L
-> We both consider ourself to offer a **platform** and I truly believe that these two platforms are complementary.

- Before we get into the reasoning behind this believe, let us first introduce *GitLab, the DevSecOps Platform* to you.
- The short pitch of what GitLab is: a manufacturing line for software. And I use the word software in a very broad sense: everything that includes some kind of textual code to let computers to dance for us: from programm code in languages from C to Go to infrastructure described by code or metadata and parametrization used to develop AI models. 
- GitLab enables you to start with an idea, collaborate to improve the idea, plan your work together and start creating with your team. The creation get's tested in an automated fashion, a test environment is deployed for verification and you iterate on your creation until you get approval and deploy to production to show the world what have created.
- Key benefits of GitLab are
    - Gain more speed
    - Increase efficiency 
    - Improve quality and make your software more secure
- Sounds to easy, correct? But we are not the only ones who claims to be a platform and everybody promises you that it is easy. We know!
- Seeing is believing, so let me show how easy PaaS is. We all know PaaS: Platform as a Service! Wrong! During this session PaaS stands for Presentation as a Service!!
- Our idea is to build the slides from markdown files with the help of GitLab and Google Cloud. As a result we will finally publish the slides to production with the help of Cloud Run so that you can access them. 
- We will walk you through the workflow and we are using GitLab.com, the SaaS offering of GitLab. GitLab can also be deployed on premise, but that doesn't fits here, right?
- You probably already recognized that I'm not a proper developer. i'm only an operations guy who saw the light of wisdom in the form of Infrastructure as Code and GitOps. But my friend Peter is the developer in this crazy relationship. Consequently he will guide you through the development workflow with GitLab	and I will show you how it looks in GitLab.

- Highlight how GitLab and GCP will work together:
    - GitLab hosts the source code.
    - Planning and collaboration happens on GitLab.
    - All automation is triggered from GitLab
    - Building, testing and production are happening on Google Cloud
        - Cloud Build
        - Container/Artifact Registry
        - Cloud Run
    - GitLab provides a single pane of glass of development process

- After ingenuity hit us and we have had the idea of PaaS, we create an epic. An epic is the place to brainstorm your ideas and do portfolio management. You can use sub-epics, milestones and iterations to  do a more fine granular planning. But we want to keep simple today, right?
- Once we agreed on an initial set of features, we start working on the code and issues are exactly exactly for that. We have two workstream:
    - Develop the talk track of this session and creating the slides
    - Build all the magic that creates html out of markdown an publishes the results.
- Consequently we created two issues: one for each workstream. Peter took responsibility for the slide/talk part and I hacked the automation part together. This enables us to work independently but also be able to collaborate and help each other.
- Out of each issue we created a merge request as the final goal is to merge what each of us has created independently. In the merge request the results of all the automations are visible.
    - Once you commit code and pushes the commit to GitLab.com CI/CD kicks in. CI/CD stands for Continous Integration and Continous Deployment.


- 